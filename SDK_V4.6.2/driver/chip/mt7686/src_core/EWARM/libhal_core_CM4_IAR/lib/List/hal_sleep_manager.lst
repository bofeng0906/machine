###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Apr/2017  14:04:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_sleep_manager.c
#    Command line =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_sleep_manager.c
#        -D MTK_DEBUG_LEVEL_INFO -D PRODUCT_VERSION=7686 -lcN
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List
#        -lA
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\CMSIS\Include\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\CMSIS\Device\MTK\mt7686\Include\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\..\kernel\service\inc\
#        -I W:\Documents\2523_dev\gva\middleware\MTK\minicli\inc\ -Om -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\"
#    List file    =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List\hal_sleep_manager.lst
#    Object file  =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\Obj\hal_sleep_manager.o
#
###############################################################################

W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_sleep_manager.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include "hal_sleep_manager.h"
     36          #ifdef HAL_SLEEP_MANAGER_ENABLED
     37          
     38          #include "hal_sleep_manager_internal.h"
     39          #include "hal_sleep_manager_retention.h"
     40          #include "hal_sleep_manager_platform.h"
     41          #include "hal_spm.h"
     42          #include "hal_log.h"
     43          #include "hal_gpt.h"
     44          
     45          void Deep_Sleep_GPT_CB()
     46          {
     47              hal_gpt_stop_timer(DEEP_SLEEP_GPT);
     48          }
     49          
     50          uint8_t hal_sleep_manager_set_sleep_handle(const char *handle_name)
     51          {
     52              uint8_t index;
     53              index = sleep_management_get_lock_handle(handle_name);
     54              return index;
     55          }
     56          
     57          hal_sleep_manager_status_t hal_sleep_manager_lock_sleep(uint8_t handle_index)
     58          {
     59              sleep_management_lock_sleep(LOCK_SLEEP, handle_index);
     60              return HAL_SLEEP_MANAGER_OK;
     61          }
     62          
     63          hal_sleep_manager_status_t hal_sleep_manager_unlock_sleep(uint8_t handle_index)
     64          {
     65              sleep_management_lock_sleep(UNLOCK_SLEEP, handle_index);
     66              return HAL_SLEEP_MANAGER_OK;
     67          }
     68          
     69          hal_sleep_manager_status_t hal_sleep_manager_release_sleep_handle(uint8_t handle_index)
     70          {
     71              sleep_management_release_lock_handle(handle_index);
     72              return HAL_SLEEP_MANAGER_OK;
     73          }
     74          
     75          uint32_t hal_sleep_manager_get_lock_status(void)
     76          {
     77              return sleep_management_get_lock_sleep_request_info();
     78          }
     79          
     80          uint32_t hal_sleep_manager_sleep_driver_dump_handle_name(void)
     81          {
     82              return sleep_management_get_lock_sleep_handle_list();
     83          }
     84          
     85          bool hal_sleep_manager_is_sleep_locked(void)
     86          {
     87              return sleep_management_check_sleep_locks();
     88          }
     89          
     90          bool hal_sleep_manager_is_sleep_handle_alive(uint8_t handle_index)
     91          {
     92              return sleep_management_check_handle_status(handle_index);
     93          }
     94          
     95          #ifdef HAL_SLEEP_MANAGER_SUPPORT_POWER_OFF
     96          void hal_sleep_manager_enter_power_off_mode()
     97          {
     98          
     99          }
    100          #endif
    101          
    102          hal_sleep_manager_status_t hal_sleep_manager_set_sleep_time(uint32_t sleep_time_ms)
    103          {
    104              hal_gpt_status_t         ret_status;
    105              hal_gpt_register_callback(DEEP_SLEEP_GPT, (hal_gpt_callback_t)Deep_Sleep_GPT_CB, NULL);
    106              if (sleep_time_ms > HAL_GPT_MAXIMUM_MS_TIMER_TIME) {
    107                  sleep_time_ms = HAL_GPT_MAXIMUM_MS_TIMER_TIME;
    108              }
    109              ret_status = hal_gpt_start_timer_ms(DEEP_SLEEP_GPT, sleep_time_ms, HAL_GPT_TIMER_TYPE_ONE_SHOT);
    110              if (ret_status != HAL_GPT_STATUS_OK) {
    111                  log_hal_info("ERROR : Deep Sleep GPT Start Fail");
    112                  return HAL_SLEEP_MANAGER_ERROR;
    113              }
    114          
    115              return HAL_SLEEP_MANAGER_OK;
    116          }
    117          
    118          void hal_sleep_manager_enter_sleep_mode(hal_sleep_mode_t mode)
    119          {
    120              if (mode == HAL_SLEEP_MODE_IDLE) {
    121                  __asm volatile("dsb");
    122                  __asm volatile("wfi");
    123                  __asm volatile("isb");
    124                  hal_gpt_stop_timer(DEEP_SLEEP_GPT);
    125              } else if (mode == HAL_SLEEP_MODE_SLEEP) {
    126                  sleep_management_enter_deep_sleep(mode);
    127                  hal_gpt_stop_timer(DEEP_SLEEP_GPT);
    128              } else if (mode == HAL_SLEEP_MODE_RETENTION) {
    129                  sleep_management_enter_retention();
    130              }
    131          }
    132          
    133          #ifdef HAL_SLEEP_MANAGER_SUPPORT_WAKEUP_SOURCE_CONFIG
    134          hal_sleep_manager_status_t hal_sleep_manager_enable_wakeup_pin(hal_sleep_manager_wakeup_source_t pin)
    135          {
    136              spm_unmask_wakeup_source(pin);
    137              return HAL_SLEEP_MANAGER_OK;
    138          }
    139          
    140          hal_sleep_manager_status_t hal_sleep_manager_disable_wakeup_pin(hal_sleep_manager_wakeup_source_t pin)
    141          {
    142              spm_mask_wakeup_source(pin);
    143              return HAL_SLEEP_MANAGER_OK;
    144          }
    145          #endif
    146          
    147          uint8_t cli_sleep_handle = 0xFF;
    148          hal_sleep_manager_status_t hal_sleep_manager_init()
    149          {
    150              log_hal_info("hal_sleep_manager_init start\n");
    151              
    152              sleep_management_low_power_init_setting();
    153          
    154              spm_init(0);
    155          
    156              #if (PRODUCT_VERSION == 7682 || PRODUCT_VERSION == 7686)
    157              spm_control_mtcmos(SPM_MTCMOS_CONN      ,SPM_MTCMOS_PWR_DISABLE);
    158              #endif
    159              spm_control_mtcmos(SPM_MTCMOS_SDIO_SLV  ,SPM_MTCMOS_PWR_DISABLE);
    160              
    161              if (hal_gpt_init(DEEP_SLEEP_GPT) != HAL_GPT_STATUS_OK) {
    162                  log_hal_info("ERROR : Deep Sleep GPT Init Fail");
    163                  return HAL_SLEEP_MANAGER_ERROR;
    164              }
    165          
    166              cli_sleep_handle = hal_sleep_manager_set_sleep_handle("CLI_Sleep");
    167              //hal_sleep_manager_lock_sleep(cli_sleep_handle);
    168              return HAL_SLEEP_MANAGER_OK;
    169          }
    170          
    171          #endif /* HAL_SLEEP_MANAGER_ENABLED */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Deep_Sleep_GPT_CB
         0   -> hal_gpt_stop_timer
       8   hal_sleep_manager_enter_sleep_mode
         0   -> hal_gpt_stop_timer
         8   -> sleep_management_enter_deep_sleep
         0   -> sleep_management_enter_retention
       0   hal_sleep_manager_get_lock_status
         0   -> sleep_management_get_lock_sleep_request_info
       8   hal_sleep_manager_init
         8   -> hal_gpt_init
         8   -> hal_sleep_manager_set_sleep_handle
         8   -> log_hal_info_internal
         8   -> sleep_management_low_power_init_setting
         8   -> spm_control_mtcmos
         8   -> spm_init
       0   hal_sleep_manager_is_sleep_handle_alive
         0   -> sleep_management_check_handle_status
       0   hal_sleep_manager_is_sleep_locked
         0   -> sleep_management_check_sleep_locks
       8   hal_sleep_manager_lock_sleep
         8   -> sleep_management_lock_sleep
       8   hal_sleep_manager_release_sleep_handle
         8   -> sleep_management_release_lock_handle
       0   hal_sleep_manager_set_sleep_handle
         0   -> sleep_management_get_lock_handle
       8   hal_sleep_manager_set_sleep_time
         8   -> hal_gpt_register_callback
         8   -> hal_gpt_start_timer_ms
         8   -> log_hal_info_internal
       0   hal_sleep_manager_sleep_driver_dump_handle_name
         0   -> sleep_management_get_lock_sleep_handle_list
       8   hal_sleep_manager_unlock_sleep
         8   -> sleep_management_lock_sleep


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
      36  ?_0
      32  ?_1
      36  ?_2
      12  ?_3
       6  Deep_Sleep_GPT_CB
       1  cli_sleep_handle
      60  hal_sleep_manager_enter_sleep_mode
       4  hal_sleep_manager_get_lock_status
      88  hal_sleep_manager_init
       4  hal_sleep_manager_is_sleep_handle_alive
       4  hal_sleep_manager_is_sleep_locked
      14  hal_sleep_manager_lock_sleep
      10  hal_sleep_manager_release_sleep_handle
       4  hal_sleep_manager_set_sleep_handle
      60  hal_sleep_manager_set_sleep_time
       4  hal_sleep_manager_sleep_driver_dump_handle_name
      14  hal_sleep_manager_unlock_sleep
      60  -- Other

 
   1 byte  in section .data
 464 bytes in section .text
 
 464 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
