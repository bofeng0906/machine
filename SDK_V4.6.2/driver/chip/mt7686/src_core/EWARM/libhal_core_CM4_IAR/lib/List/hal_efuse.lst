###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       07/Apr/2017  14:04:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_efuse.c
#    Command line =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_efuse.c -D
#        MTK_DEBUG_LEVEL_INFO -D PRODUCT_VERSION=7686 -lcN
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List
#        -lA
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List
#        --diag_suppress Pa050,Ta022,Ta023 --diag_error Pe606 -o
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\Obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Full.h" -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\inc\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\CMSIS\Include\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\CMSIS\Device\MTK\mt7686\Include\
#        -I
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\..\..\..\..\..\..\kernel\service\inc\
#        -I W:\Documents\2523_dev\gva\middleware\MTK\minicli\inc\ -Om -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\CMSIS\Include\"
#    List file    =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\List\hal_efuse.lst
#    Object file  =  
#        W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\EWARM\libhal_core_CM4_IAR\lib\Obj\hal_efuse.o
#
###############################################################################

W:\Documents\2523_dev\gva\driver\chip\mt7686\src_core\hal_efuse.c
      1          /* Copyright Statement:
      2           *
      3           * (C) 2005-2016  MediaTek Inc. All rights reserved.
      4           *
      5           * This software/firmware and related documentation ("MediaTek Software") are
      6           * protected under relevant copyright laws. The information contained herein
      7           * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
      8           * Without the prior written permission of MediaTek and/or its licensors,
      9           * any reproduction, modification, use or disclosure of MediaTek Software,
     10           * and information contained herein, in whole or in part, shall be strictly prohibited.
     11           * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
     12           * if you have agreed to and been bound by the applicable license agreement with
     13           * MediaTek ("License Agreement") and been granted explicit permission to do so within
     14           * the License Agreement ("Permitted User").  If you are not a Permitted User,
     15           * please cease any access or use of MediaTek Software immediately.
     16           * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
     17           * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
     18           * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
     19           * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
     20           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
     21           * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
     22           * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
     23           * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
     24           * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
     25           * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
     26           * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
     27           * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
     28           * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
     29           * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
     30           * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
     31           * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
     32           * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
     33           */
     34          
     35          #include <string.h>
     36          
     37          #include "hal_platform.h"
     38          #include "hal_efuse.h"
     39          #include "type_def.h"
     40          
     41          #define PMU_ELDO (PMU_BASE+0x0118)
     42          
     43          #define HAL_EFUSE_WRITE_MAGIC (0xA07923B6)
     44          
     45          typedef union {
     46              struct {
     47                  uint32_t VLD:  1;
     48                  uint32_t rsv0: 7;
     49                  uint32_t BUSY: 1;
     50                  uint32_t rsv1: 7;
     51                  uint32_t RD:   1;
     52                  uint32_t rsv2: 7;
     53                  uint32_t RST:  1;
     54                  uint32_t rsv3: 7;
     55              } b;
     56              uint32_t w;
     57          } EFUSE_CON1_REGISTER_T;
     58          
     59          typedef struct {
     60              __IO EFUSE_CON1_REGISTER_T EFUSEC_CON1;       /* EFUSEC Control1 */
     61              __IO uint32_t EFUSEC_CON2;       /* EFUSEC Control2 */
     62              __IO uint32_t EFUSEC_BPKEY;      /* EFUSE Blowing Protection Key */
     63              __IO uint32_t EFUSEC_PGMT;       /* EFUSE Blowing Time */
     64          } EFUSE_REGISTER_T;
     65          
     66          EFUSE_REGISTER_T *EFUSE_REGISTER = (EFUSE_REGISTER_T *)EFUSE_BASE;
     67          
     68          hal_efuse_status_t hal_efuse_write(uint32_t magic, uint16_t addr, const uint8_t *buf, uint8_t len)
     69          {
     70              uint32_t eldo_en, real_addr, value, i;
     71          
     72              if (buf == NULL || len % 4 || addr & 0x3) {
     73                  return HAL_EFUSE_INVALID_PARAMETER;
     74              }
     75          
     76              if (magic != HAL_EFUSE_WRITE_MAGIC) {
     77                  return HAL_EFUSE_INVALID_MAGIC;
     78              }
     79          
     80              real_addr = EFUSE_BASE + addr;
     81          
     82              /* ELDO_EN = 1 */
     83              eldo_en = DRV_Reg32(PMU_ELDO) | 0x1;
     84              DRV_WriteReg32(PMU_ELDO, eldo_en);
     85          
     86              /* Polling until EFUSE data is valid */
     87              while(EFUSE_REGISTER->EFUSEC_CON1.b.VLD != 1);
     88          
     89              /* Unlock */
     90              EFUSE_REGISTER->EFUSEC_BPKEY = HAL_EFUSE_WRITE_MAGIC;
     91          
     92              for (i = 0;i < len;i += 4) {
     93                  /* Write EFUSE data */
     94                  memcpy(&value, buf + i, sizeof(uint32_t));
     95                  DRV_WriteReg32(real_addr + i, value);
     96              }
     97          
     98              /* Wait until not busy */
     99              while(EFUSE_REGISTER->EFUSEC_CON1.b.BUSY != 0);
    100          
    101              /* Lock */
    102              EFUSE_REGISTER->EFUSEC_BPKEY = 0;
    103          
    104              /* Re-initialize */
    105              EFUSE_REGISTER->EFUSEC_CON1.b.RD = 1;
    106          
    107              /* Polling until EFUSE data is valid */
    108              while(EFUSE_REGISTER->EFUSEC_CON1.b.VLD != 1);
    109          
    110              /* ELDO_EN = 0 */
    111              eldo_en = DRV_Reg32(PMU_ELDO) & (~0x1);
    112              DRV_WriteReg32(PMU_ELDO, eldo_en);
    113          
    114              return HAL_EFUSE_OK;
    115          }
    116          
    117          hal_efuse_status_t hal_efuse_read(uint16_t addr, uint8_t *buf, uint8_t len)
    118          {
    119              uint32_t eldo_en, real_addr, value, i;
    120          
    121              if (buf == NULL || len % 4 || addr & 0x3) {
    122                  return HAL_EFUSE_INVALID_PARAMETER;
    123              }
    124          
    125              real_addr = EFUSE_BASE + addr;
    126          
    127              /* ELDO_EN = 1 */
    128              eldo_en = DRV_Reg32(PMU_ELDO) | 0x1;
    129              DRV_WriteReg32(PMU_ELDO, eldo_en);
    130          
    131              /* Polling until EFUSE data is valid */
    132              while(EFUSE_REGISTER->EFUSEC_CON1.b.VLD != 1);
    133          
    134              for (i = 0;i < len;i += 4) {
    135                  /* Read EFUSE data */
    136                  value = DRV_Reg32(real_addr + i);
    137                  memcpy(buf + i, &value, sizeof(uint32_t));
    138              }
    139          
    140              /* ELDO_EN = 0 */
    141              eldo_en = DRV_Reg32(PMU_ELDO) & (~0x1);
    142              DRV_WriteReg32(PMU_ELDO, eldo_en);
    143          
    144              return HAL_EFUSE_OK;
    145          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   hal_efuse_read
        32   -> __aeabi_memcpy
      32   hal_efuse_write
        32   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  EFUSE_REGISTER
      98  hal_efuse_read
     152  hal_efuse_write

 
   4 bytes in section .data
 266 bytes in section .text
 
 266 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
