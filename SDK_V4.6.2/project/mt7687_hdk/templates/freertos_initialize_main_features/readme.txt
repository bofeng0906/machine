/* Copyright Statement:
 *
 * (C) 2005-2017 MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its
 * licensors. Without the prior written permission of MediaTek and/or its
 * licensors, any reproduction, modification, use or disclosure of MediaTek
 * Software, and information contained herein, in whole or in part, shall be
 * strictly prohibited. You may only use, reproduce, modify, or distribute
 * (as applicable) MediaTek Software if you have agreed to and been bound by
 * the applicable license agreement with MediaTek ("License Agreement") and
 * been granted explicit permission to do so within the License Agreement
 * ("Permitted User"). If you are not a Permitted User, please cease any
 * access or use of MediaTek Software immediately.
 */

/**
 * @addtogroup mt7687_hdk mt7687_hdk
 * @{
 * @addtogroup mt7687_hdk_templates templates
 * @{
 * @addtogroup mt7687_hdk_templates_freertos_initialize_main_features freertos_initialize_main_features
 * @{

@par Overview
  - Example description
    - Potential users of this project are developers who want to create their
      own project with WIFI and FreeRTOS and the purpose of this project is
      to demonstrate how to achieve this goal on the basis of this project.
    - This example describes how to initialize hardware infrastructure and
      main function features of LinkIt 7687 board by SAC.
  - How to create your own project based on this project
    - Clone this project to apps folder and rename it to your own project
      name.
    - Hardware initialization and tasks creation other than BT part, please
      follow comments described in the main.c of this project.
  - Features of the example project
    - The project initializes the hardware and demonstrates how to create
      user-defined applications.
  - Result
    - The log will show the system initialization flow.

@par Hardware and software environment
  - Supported HDK
    - LinkIt 7687 HDK.
  - HDK switches and pin configuration
    - N/A.
  - Environment configuration
    - The output logs are communicated through a type-A to micro-B USB cable
      to the PC from USB (CON5) connector on the HDK.
    - Install the mbed serial driver according to the instructions at
      https://developer.mbed.org/handbook/Windows-serial-configuration. For
      more information, please refer to section "Installing the LinkIt 7687
      HDK drivers on Microsoft Windows" on the "LinkIt 7687HDK User Guide" in
      [sdk_root]/doc folder.
    - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
      CON5 micro-B USB connector on the LinkIt 7687 HDK. For more information
      about the connector cable, please refer to
      https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
    - Launch a terminal emulator program, such as Tera terminal on your PC
      for data logging through UART. For the installation details, please
      refer to section "Installing Tera terminal on Microsoft Windows" on the
      "LinkIt for RTOS Get Started Guide" in [sdk_root]/doc folder.
    - COM port settings. baudrate: 115200, data: 8 bits, stop bit: 1, parity:
      none and flow control: off.

@par Directory contents
  - Source and header files
    - \b src/main.c:              Main program.
    - \b src/system_mt7687.c:     The configuration file of the Cortex-M4 with
                                  floating point core registers and system
                                  clock.
    - \b src/sys_init.c:          This file initializes the basic hardware
                                  environment for the system, including system
                                  clock, UART port for logging, Pinmux, cache
                                  and other necessary hardware.
    - \b src/ept_eint_var.c:      The EINT configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not edit the
                                  file.
    - \b src/ept_gpio_var.c:      The GPIO configuration file generated by the
                                  EPT. Please do not edit the file.
    - \b src/wifi_lwip_helper.c:  This file includes wifi and lwip setup ocde.
    - \b inc/FreeRTOSConfig.h:    FreeRTOS feature configuration file.
    - \b inc/task_def.h:          Define the task stack size, queue length,
                                  project name, and priority for the
                                  application to create tasks.
    - \b inc/hal_feature_config.h:
                                  MT7687 feature configuration file.
    - \b inc/flash_map.h:         MT7687 memory layout symbol file.
    - \b inc/ept_eint_drv.h:      The EINT configuration file generated by the
                                  EPT. Please do not edit the file.
    - \b inc/ept_gpio_drv.h:      The GPIO configuration file generated by the
                                  EPT. Please do not edit the file.
    - \b inc/sys_init.h:          The header file of sys_init.c.
    - \b inc/wifi_lwip_helper.h:  The header file of wifi_lwip_helper.c.
    - \b inc/lwipopts.h:          The header file of lwip options.
    - \b GCC/startup_mt7687.s:    MT7687 startup file for GCC.
    - \b GCC/syscalls.c:          The minimal implementation of the system
                                  calls.
    - \b MDK-ARM/startup_mt7687.s:
                                  MT7687 startup file for Keil IDE.
  - Project configuration files using GCC
    - \b GCC/feature.mk:       Feature configuration.
    - \b GCC/Makefile:         Makefile.
    - \b GCC/mt7687_flash.ld:  Linker script.
  - Project configuration files using Keil IDE
    - \b MDK-ARM/freertos_initialize_main_features.uvprojx:
                             uVision5 Project File. Contains the project
                             structure in XML format.
    - \b MDK-ARM/freertos_initialize_main_features.uvoptx:
                             uVision5 project options. Contains the settings
                             for the debugger, trace configuration,
                             breakpoints, currently opened files, etc.
    - \b MDK-ARM/flash.sct:  Linker script.

@par Run the demo
  - Build the example project with a command "./build.sh mt7687_hdk
    freertos_initialize_main_features" from the SDK root folder and download
    the binary file to LinkIt 7687 HDK.
  - Connect the HDK to the PC with a type-A to micro-B USB cable and specify
    the port on Tera terminal corresponding to "mbed Serial Port".
  - Run the example. The log will show "system up" and "Supplicant Ready".
    This indicates a successful operation.
*/
/**
 * @}
 * @}
 * @}
 */

