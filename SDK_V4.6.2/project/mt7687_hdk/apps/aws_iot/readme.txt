/* Copyright Statement:
 *
 * (C) 2005-2017 MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its
 * licensors. Without the prior written permission of MediaTek and/or its
 * licensors, any reproduction, modification, use or disclosure of MediaTek
 * Software, and information contained herein, in whole or in part, shall be
 * strictly prohibited. You may only use, reproduce, modify, or distribute
 * (as applicable) MediaTek Software if you have agreed to and been bound by
 * the applicable license agreement with MediaTek ("License Agreement") and
 * been granted explicit permission to do so within the License Agreement
 * ("Permitted User"). If you are not a Permitted User, please cease any
 * access or use of MediaTek Software immediately.
 */

/**
 * @addtogroup mt7687_hdk mt7687_hdk
 * @{
 * @addtogroup mt7687_hdk_apps apps
 * @{
 * @addtogroup mt7687_hdk_apps_aws_iot aws_iot
 * @{

@par Overview
  - Application description
    - This application is a simple demonstration program which shows how to
      use the AWS IoT APIS.
  - Features of the example project
    - This example demonstrates set and start a service running AWS Iot MQTT client.
    - This application explain user to how to:
    - 1. Connect to AWS IoT proxy via MQTT over TLS
    - 2. Subscribe topic to MQTT server
    - 3. Create shadow in AWS IoT server via publish some MQTT message
    - 4. Update shadow status (five time)
    - 5. Stop conection, disconnect MQTT
  - Results
    - The transaction output is collected in a log.

@par Hardware and software environment
  - Supported platform
    - LinkIt 7687 HDK.
  - Environment configuration
    - The output logs are communicated through a micro USB cable to the PC
      from USB (CON5) connector on the HDK.
      - Install the mbed serial driver according to the instructions at
        https://developer.mbed.org/handbook/Windows-serial-configuration. For
        more information, please refer to section "Installing the LinkIt 7687
        HDK drivers on Microsoft Windows" on the "LinkIt 7687 HDK User Guide"
        in [sdk_root]/doc folder.
      - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
        MK20 micro-B USB connector on the LinkIt 7687 HDK. For more
        information about the connector cable, please refer to
        https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
      - Launch a terminal emulator program, such as Tera terminal on your PC
        for data logging through UART. For the installation details, please
        refer to section "Installing Tera terminal on Microsoft Windows" on
        the "LinkIt for RTOS Get Started Guide" in [sdk_root]/doc folder.
      - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1,
        parity: none and flow control: off.
      - Configure a Wi-Fi router with the SSID as SQA_TEST_AP, password as
        77777777, and authentication mode as WPA_PSK_WPA2_PSK. The Wi-Fi
        router should have the internet connection.
      - You can change the default settings in main.c to adapt the device to
        your Wi-Fi Accesss Point by specifying SSID and password.

@par Directory contents
  - Source and header files.
    - \b src/main.c:              Main program file.
    - \b src/aws_iot_test.c:      AWS IoT test case file.
    - \b src/system_mt7687.c:     The configuration file of the Cortex-M4 with
                                  floating point core registers and system
                                  clock.
    - \b src/sys_init.c:          This file initializes the basic hardware
                                  environment for the system, including system
                                  clock, UART port for logging, Pinmux, cache
                                  and other necessary hardware.
    - \b src/wifi_lwip_helper.c:  Network helper function for Wi-Fi station
                                  mode initialization until IP network ready.
    - \b src/ept_eint_var.c:      The EINT configuration file generated by Easy
                                  Pinmux Tool (EPT). Please do not edit the
                                  file.
    - \b src/ept_gpio_var.c:      The GPIO configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b inc/FreeRTOSConfig.h:    FreeRTOS feature configuration file.
    - \b inc/aws_iot_test.h:      AWS IoT test case interface file.
    - \b inc/task_def.h:          Define the task stack size, queue length,
                                  project name, and priority for the
                                  application to create tasks.
    - \b inc/hal_feature_config.h:
                                  MT76x7's feature configuration file.
    - \b inc/flash_map.h:         MT76x7's memory layout symbol file.
    - \b inc/ept_eint_drv.h:      The EINT configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b inc/ept_gpio_drv.h:      The GPIO configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b inc/sys_init.h:          The header file of sys_init.c.
    - \b inc/wifi_lwip_helper.h:  The header file of wifi_lwip_helper.c.
    - \b inc/lwipopts.h:          The configuration file of tcpip feature.
  - Project configuration files using GCC
    - \b GCC/feature.mk:          Feature configuration.
    - \b GCC/makefile:            Makefile.
    - \b GCC/mt7687_flash.ld:     Linker script.
    - \b GCC/startup_mt7687.s:    MT76x7's startup file for GCC.
    - \b GCC/syscalls.c:          The minimal implementation of the system calls.
  - Project configuration files using Keil
    - \b MDK-ARM/aws_iot.uvprojx:
                                  uVision5 project file. Contains the project
                                  structure in XML format.
    - \b MDK-ARM/flash.sct:  Linker script.
  - Project configuration files using IAR
    - \b EWARM/aws_iot.ewd:       IAR project options. Contains the settings for
                                  the debugger.
    - \b EWARM/aws_iot.ewp:       IAR project file. Contains the project
                                  structure in XML format.
    - \b EWARM/aws_iot.eww:       IAR workspace file. Contains project
                                  information.
    - \b EWARM/flash.icf:         Linker script.

@par Run the application
  - Please get AWS IOT certificates from AWS IOT Console, then put the certificates into
    "project/common/certs_protected/aws".
  - Build the application with the command, "./build.sh mt7687_hdk
    aws_iot" from the SDK root folder and download the bin file to LinkIt
    7687 development board.
  - Connect your board to the PC with a micro USB cable.
  - Run the application. The result is displayed in the log. "example project
    test success" printed in the log indicates a success.
*/
/**
 * @}
 * @}
 * @}
 */

