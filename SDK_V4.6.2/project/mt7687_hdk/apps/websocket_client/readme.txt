/* Copyright Statement:
 *
 * (C) 2005-2017 MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its
 * licensors. Without the prior written permission of MediaTek and/or its
 * licensors, any reproduction, modification, use or disclosure of MediaTek
 * Software, and information contained herein, in whole or in part, shall be
 * strictly prohibited. You may only use, reproduce, modify, or distribute
 * (as applicable) MediaTek Software if you have agreed to and been bound by
 * the applicable license agreement with MediaTek ("License Agreement") and
 * been granted explicit permission to do so within the License Agreement
 * ("Permitted User"). If you are not a Permitted User, please cease any
 * access or use of MediaTek Software immediately.
 */

/**
 * @addtogroup mt7687_hdk mt7687_hdk
 * @{
 * @addtogroup mt7687_hdk_apps apps
 * @{
 * @addtogroup mt7687_hdk_apps_websocket_client websocket_client
 * @{

@par Overview
  - Application description
    - Websocket is a communication protocol, which provides full-duplex
      communication channels over a single TCP connection. This application
      is a demonstration of a websocket client.
  - Features of the application
    - Connect to a websocket server.
    - Send data to the server.
    - Receive data from the server.
    - Disconnect to the server.
  - Results
    - The output is collected in a log.

@par Hardware and software environment
  - Supported platform
    - LinkIt 7687 HDK.
  - Environment configuration
    - The output logs are communicated through a micro-USB cable to the PC
      from USB (CON5) connector on the HDK.
      - Install the mbed serial driver according to the instructions at
        https://developer.mbed.org/handbook/Windows-serial-configuration. For
        more information, please refer to section "Installing the LinkIt 7687
        HDK drivers on Microsoft Windows" on the "LinkIt 7687 HDK User Guide"
        in [sdk_root]/doc folder.
      - Use a type-A to micro-B USB cable to connect type-A USB of the PC and
        MK20 micro-B USB connector on the LinkIt 7687 HDK. For more
        information about the connector cable, please refer to
        https://en.wikipedia.org/wiki/USB#Mini_and_micro_connectors.
      - Launch a terminal emulator program, such as Tera terminal on your PC
        for data logging through UART. For the installation details, please
        refer to section "Installing Tera terminal on Microsoft Windows" on
        the "LinkIt for RTOS Get Started Guide" in [sdk_root]/doc folder.
      - COM port settings. baudrate: 115200, data bits: 8, stop bit: 1,
        parity: none and flow control: off.

@par Directory contents
  - Source and header files
    - \b src/main.c:              Main program.
    - \b src/test_librws_creation.c:
                                  Websocket client demonstration. This file was
                                  derived from
                                  https://github.com/OlehKulykov/librws,
                                  MediaTek modified it to integrate it in this
                                  example project.
    - \b src/test_librws_socket_get_set.c:
                                  Websocket get and set API demonstration. This
                                  file was derived from
                                  https://github.com/OlehKulykov/librws,
                                  MediaTek modified it to integrate it in this
                                  example project.
    - \b src/wifi_lwip_helper.c:  Network helper function for Wi-Fi station
                                  mode initialization until IP network ready.
    - \b src/ept_eint_var.c:      The EINT configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b src/ept_gpio_var.c:      The GPIO configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b src/system_mt7687.c:     MT76x7 clock configuration file.
    - \b src/sys_init.c:          This file initializes the basic hardware
                                  environment for the system, including system
                                  clock, UART port for logging, Pinmux, cache
                                  and other necessary hardware.
    - \b inc/test_librws_creation.h:
                                  Websocket client demonstration entry.
    - \b inc/task_def.h:          Define the task stack size, queue length,
                                  project name, and priority for the
                                  application to create tasks.
    - \b inc/hal_feature_config.h:
                                  MT76x7 feature configuration file.
    - \b inc/flash_map.h:         MT76x7 memory layout symbol file.
    - \b inc/ept_eint_drv.h:      The EINT configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b inc/ept_gpio_drv.h:      The GPIO configuration file generated by Easy
                                  Pinmux Tool(EPT). Please do not edit the
                                  file.
    - \b inc/sys_init.h:          The header file of sys_init.c.
    - \b inc/wifi_lwip_helper.h:  The header file of sta_network.c.
    - \b inc/lwipopts.h:          The configuration file of tcpip feature.
    - \b GCC/startup_mt7687.s:    MT76x7 startup file for GCC.
    - \b GCC/syscalls.c:          MT76x7 syscalls for GCC.
    - \b MDK-ARM/startup_mt7687.s:
                                  MT76x7 startup file for Keil IDE.
    - \b EWARM/startup_mt7687.s:  MT76x7 startup file for IAR.
  - Project configuration files using GCC
    - \b GCC/feature.mk:       Feature configuration.
    - \b GCC/Makefile:         Makefile.
    - \b GCC/mt7687_flash.ld:  Linker script.
  - Project configuration files using Keil
    - \b MDK-ARM/websocket_client.uvprojx:
                             uVision5 project file. Contains the project
                             structure in XML format.
    - \b MDK-ARM/websocket_client.uvoptx:
                             uVision5 project options. Contains the settings
                             for the debugger, trace configuration,
                             breakpoints, currently open files, etc.
    - \b MDK-ARM/flash.sct:  Linker script.
  - Project configuration files using IAR
    - \b EWARM/websocket_client.ewd:
                           IAR project options. Contains the settings for the
                           debugger.
    - \b EWARM/websocket_client.ewp:
                           IAR project file. Contains the project structure in
                           XML format.
    - \b EWARM/websocket_client.eww:
                           IAR workspace file. Contains project information.
    - \b EWARM/flash.icf:  Linker script.

@par Run the application
  - Build the application with the command "./build.sh mt7687_hdk
    websocket_client" from the SDK root folder and download the binary file
    to the LinkIt 7687 evelopment board.
  - Connect your board to the PC with a micro-USB cable.
  - Set up a WiFi router which connects to the internet.
    - Router settings: name: SQA_TEST_AP, password: 77777777, auth mode:
      WPA_PSK_WPA2_PSK.
    - You can also change the default settings in main.c to adapt the device
      to your Wi-Fi Access Point by specifying authentication mode,
      encryption mode, SSID, and password.
  - Run the application. The transaction result is displayed in the log.
    "example project test success" printed in the log indicates a success.
*/
/**
 * @}
 * @}
 * @}
 */
